name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ] # 匹配类似 v1.0.0 的标签
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch # 始终生成分支名称作为标签 (例如: main)
            type=semver,pattern={{version}} # 从v*标签中提取版本号 (例如: 1.0.0)
            type=semver,pattern={{major}}.{{minor}} # 从v*标签中提取主次版本号 (例如: 1.0)
            type=semver,pattern={{major}} # 从v*标签中提取主版本号 (例如: 1)
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # 当且仅当在main分支上时，生成latest标签

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          load: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
